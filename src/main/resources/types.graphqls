scalar Object
scalar ServiceURI
scalar NodeType
scalar Url
scalar Boolean
scalar Long

input BasicFilterInput {
    name: String
}

input EnvironmentNodeFilterInput {
    name: String
    nodeType: String
}

type ServiceRef {
    serviceUri: ServiceURI!
    alias: String
    labels: Object!
    annotations: Annotations!
}

type Annotations {
    platform: Object!
    cryostat: Object!
}

type TargetNode implements Node {
    target: ServiceRef!
    recordings: Recordings!

    name: String!
    nodeType: NodeType!
    labels: Object!

    doStartRecording(recording: RecordingSettings!): ActiveRecording!
    doSnapshot: ActiveRecording!
}

type EnvironmentNode implements Node {
    children: [Node!]!

    name: String!
    nodeType: NodeType!
    labels: Object!

    descendantTargets: [TargetNode!]! # TODO add some kind of filters
}

interface Node {
    name: String!
    nodeType: NodeType!
    labels: Object!
}

type Recordings {
    active(names: [String!]): [ActiveRecording!]! # TODO better filtering, not just on name
    archived(names: [String!]): [ArchivedRecording!]!
}

type ActiveRecording implements Recording {
    state: String!
    startTime: Long!

    duration: Long!
    continuous: Boolean!
    toDisk: Boolean!
    maxSize: Long!
    maxAge: Long!

    name: String!
    reportUrl: Url!
    downloadUrl: Url!

    doArchive: ArchivedRecording!
    doStop: ActiveRecording!
    doDelete: ActiveRecording!
}

type ArchivedRecording implements Recording {
    name: String!
    reportUrl: Url!
    downloadUrl: Url!

    doDelete: ArchivedRecording!
}

interface Recording {
    name: String!
    reportUrl: Url!
    downloadUrl: Url!
}

input RecordingSettings {
    name: String!
    template: String!
    templateType: String!
    duration: Long
    continuous: Boolean
    toDisk: Boolean
    maxSize: Long
    maxAge: Long
}

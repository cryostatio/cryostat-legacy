<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<modelVersion>4.0.0</modelVersion>
<groupId>io.cryostat</groupId>
<artifactId>cryostat</artifactId>
<version>2.5.0-SNAPSHOT</version>
<packaging>jar</packaging>
<name>cryostat</name>
<url>http://maven.apache.org</url>

<repositories>
  <repository>
    <id>github</id>
    <url>https://maven.pkg.github.com/cryostatio/cryostat-core</url>
  </repository>
</repositories>

<properties>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <java.version>17</java.version>
  <maven.compiler.target>${java.version}</maven.compiler.target>
  <maven.compiler.source>${java.version}</maven.compiler.source>

  <imageBuilder>/usr/bin/podman</imageBuilder>

  <build.os>linux</build.os>
  <build.arch>amd64</build.arch>
  <baseImage>localhost/cryostat-base</baseImage>
  <baseImageTag>latest-${build.os}-${build.arch}</baseImageTag>
  <baseImageTarball>base.tar.gz</baseImageTarball>
  <node.version>v18.17.1</node.version>
  <yarn.version>v1.22.19</yarn.version>

  <postgres.image>docker.io/postgres</postgres.image>
  <postgres.version>13-bullseye</postgres.version>

  <skipTests>false</skipTests>
  <skipITs>${skipTests}</skipITs>
  <skipUTs>${skipTests}</skipUTs>
  <skipBaseImage>false</skipBaseImage>
  <headless>false</headless>
  <cryostat.imageStream>quay.io/cryostat/cryostat</cryostat.imageStream>
  <cryostat.entrypoint>/app/entrypoint.bash</cryostat.entrypoint>
  <cryostat.mainClass>io.cryostat.Cryostat</cryostat.mainClass>
  <cryostat.rjmxPort>9091</cryostat.rjmxPort>
  <cryostat.webPort>8181</cryostat.webPort>
  <cryostat.itest.pullImages>always</cryostat.itest.pullImages>
  <cryostat.itest.webPort>8181</cryostat.itest.webPort>
  <cryostat.itest.webHost>localhost</cryostat.itest.webHost>
  <cryostat.itest.podName>cryostat-itests</cryostat.itest.podName>
  <cryostat.itest.containerName>cryostat-itest</cryostat.itest.containerName>
  <cryostat.itest.imageTag>${cryostat.imageVersionLower}-${build.os}-${build.arch}</cryostat.itest.imageTag>
  <cryostat.itest.grafana.containerName>grafana-itest</cryostat.itest.grafana.containerName>
  <cryostat.itest.grafana.port>3000</cryostat.itest.grafana.port>
  <cryostat.itest.grafana.imageStream>quay.io/cryostat/cryostat-grafana-dashboard</cryostat.itest.grafana.imageStream>
  <cryostat.itest.grafana.version>latest</cryostat.itest.grafana.version>
  <cryostat.itest.jfr-datasource.containerName>jfr-datasource-itest</cryostat.itest.jfr-datasource.containerName>
  <cryostat.itest.jfr-datasource.port>8080</cryostat.itest.jfr-datasource.port>
  <cryostat.itest.jfr-datasource.imageStream>quay.io/cryostat/jfr-datasource</cryostat.itest.jfr-datasource.imageStream>
  <cryostat.itest.jfr-datasource.version>latest</cryostat.itest.jfr-datasource.version>
  <cryostat.itest.reports.port>10001</cryostat.itest.reports.port>
  <cryostat.itest.reports.imageStream>quay.io/cryostat/cryostat-reports</cryostat.itest.reports.imageStream>
  <cryostat.itest.reports.version>latest</cryostat.itest.reports.version>
  <cryostat.itest.jmx.db-passwd>${cryostat.itest.podName}</cryostat.itest.jmx.db-passwd>

  <io.reactiverse.plugin.version>1.0.27</io.reactiverse.plugin.version>
  <org.apache.maven.plugins.compiler.version>3.11.0</org.apache.maven.plugins.compiler.version>
  <org.apache.maven.plugins.surefire.version>3.1.2</org.apache.maven.plugins.surefire.version>
  <org.apache.maven.plugins.failsafe.version>${org.apache.maven.plugins.surefire.version}</org.apache.maven.plugins.failsafe.version>
  <org.apache.maven.plugins.site.version>3.12.1</org.apache.maven.plugins.site.version>
  <org.apache.maven.plugins.info.reports.version>3.4.5</org.apache.maven.plugins.info.reports.version>
  <org.apache.maven.plugins.clean.version>3.3.1</org.apache.maven.plugins.clean.version>
  <org.apache.maven.plugins.resources.version>3.3.1</org.apache.maven.plugins.resources.version>
  <org.apache.maven.plugins.assembly.version>3.6.0</org.apache.maven.plugins.assembly.version>
  <com.github.eirslett.frontend.plugin.version>1.13.4</com.github.eirslett.frontend.plugin.version>
  <org.codehaus.mojo.exec.plugin.version>3.1.0</org.codehaus.mojo.exec.plugin.version>
  <org.codehaus.mojo.build.helper.plugin.version>3.4.0</org.codehaus.mojo.build.helper.plugin.version>
  <com.mycila.license.maven.plugin.version>4.2</com.mycila.license.maven.plugin.version>
  <org.owasp.dependency.check.version>8.4.0</org.owasp.dependency.check.version>
  <com.google.cloud.tools.jib.maven.plugin.version>3.3.2</com.google.cloud.tools.jib.maven.plugin.version>

  <!-- Use a separate property for dependency alignment purposes. -->
  <com.google.dagger.version>2.47</com.google.dagger.version>
  <com.google.dagger.compiler.version>${com.google.dagger.version}</com.google.dagger.compiler.version>

  <io.cryostat.core.version>2.23.0</io.cryostat.core.version>

  <org.openjdk.nashorn.core.version>15.4</org.openjdk.nashorn.core.version>
  <org.apache.commons.lang3.version>3.12.0</org.apache.commons.lang3.version>
  <org.apache.commons.codec.version>1.16.0</org.apache.commons.codec.version>
  <org.apache.commons.validator.version>1.7</org.apache.commons.validator.version>
  <org.apache.commons.io.version>2.13.0</org.apache.commons.io.version>
  <org.apache.httpcomponents.version>4.5.14</org.apache.httpcomponents.version>
  <io.fabric8.client.version>6.7.2</io.fabric8.client.version>
  <io.vertx.web.version>4.4.4</io.vertx.web.version>
  <!-- https://repo1.maven.org/maven2/io/vertx/vertx-dependencies/${io.vertx.web.version}/vertx-dependencies-${io.vertx.web.version}.pom -->
  <!-- https://groups.google.com/g/vertx/c/uzzcgw-YuOg -->
  <io.netty.netty-transport-native-epoll.version>4.1.94.Final</io.netty.netty-transport-native-epoll.version><!-- FIXME this should be tied to the vertx version -->
  <!--
    FIXME this needs to be synced with the vertx version - is there a BOM to use or something?
    https://github.com/vert-x3/vertx-web/blob/${io.vertx.web.version}/vertx-web-graphql/pom.xml#L35
  -->
  <com.graphql.java.extended.scalars.version>20.2</com.graphql.java.extended.scalars.version>
  <com.nimbusds.jose.jwt.version>9.31</com.nimbusds.jose.jwt.version>
  <org.bouncycastle.version>1.74</org.bouncycastle.version>
  <org.jasypt.version>1.9.3</org.jasypt.version>
  <org.jasypt-hibernate5.version>1.9.3</org.jasypt-hibernate5.version>
  <org.slf4j.version>1.7.36</org.slf4j.version>
  <com.google.code.gson.version>2.10.1</com.google.code.gson.version>
  <com.github.ben-manes.caffeine.version>3.1.6</com.github.ben-manes.caffeine.version>
  <org.hibernate.hibernate.version>5.6.14.Final</org.hibernate.hibernate.version>
  <com.vladmihalcea.hibernate.types.version>2.21.1</com.vladmihalcea.hibernate.types.version>
  <com.h2database.h2.version>2.1.214</com.h2database.h2.version>
  <org.postgresql.postgresql.version>42.6.0</org.postgresql.postgresql.version>

  <com.github.spotbugs.version>4.7.3</com.github.spotbugs.version>
  <com.github.spotbugs.plugin.version>4.7.3.5</com.github.spotbugs.plugin.version>
  <org.junit.jupiter.version>5.10.0</org.junit.jupiter.version>
  <org.hamcrest.version>2.2</org.hamcrest.version>
  <org.mockito.version>5.2.0</org.mockito.version>
  <org.jacoco.maven.plugin.version>0.8.10</org.jacoco.maven.plugin.version>
  <com.diffplug.spotless.maven.plugin.version>2.39.0</com.diffplug.spotless.maven.plugin.version>
  <com.google.googlejavaformat.version>1.17.0</com.google.googlejavaformat.version>
  <org.jsoup.version>1.16.1</org.jsoup.version>
  <shellcheck-maven-plugin.version>0.5.1</shellcheck-maven-plugin.version>
</properties>

<dependencies>
  <dependency>
    <groupId>io.cryostat</groupId>
    <artifactId>cryostat-core</artifactId>
    <version>${io.cryostat.core.version}</version>
  </dependency>
  <dependency>
    <groupId>org.openjdk.nashorn</groupId>
    <artifactId>nashorn-core</artifactId>
    <version>${org.openjdk.nashorn.core.version}</version>
  </dependency>
  <dependency>
    <groupId>io.fabric8</groupId>
    <artifactId>openshift-client</artifactId>
    <version>${io.fabric8.client.version}</version>
  </dependency>
  <dependency>
    <groupId>io.fabric8</groupId>
    <artifactId>kubernetes-client</artifactId>
    <version>${io.fabric8.client.version}</version>
  </dependency>
  <dependency>
    <groupId>com.google.dagger</groupId>
    <artifactId>dagger</artifactId>
    <version>${com.google.dagger.version}</version>
  </dependency>
  <dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
    <version>${org.apache.commons.lang3.version}</version>
  </dependency>
  <dependency>
    <groupId>commons-codec</groupId>
    <artifactId>commons-codec</artifactId>
    <version>${org.apache.commons.codec.version}</version>
  </dependency>
  <dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>${org.apache.commons.io.version}</version>
  </dependency>
  <dependency>
    <groupId>commons-validator</groupId>
    <artifactId>commons-validator</artifactId>
    <version>${org.apache.commons.validator.version}</version>
  </dependency>
  <dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>${org.apache.httpcomponents.version}</version>
  </dependency>
  <dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-web</artifactId>
    <version>${io.vertx.web.version}</version>
  </dependency>
  <dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-web-client</artifactId>
    <version>${io.vertx.web.version}</version>
  </dependency>
  <dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-web-graphql</artifactId>
    <version>${io.vertx.web.version}</version>
  </dependency>
  <dependency>
    <groupId>com.graphql-java</groupId>
    <artifactId>graphql-java-extended-scalars</artifactId>
    <version>${com.graphql.java.extended.scalars.version}</version>
  </dependency>
  <dependency>
    <groupId>com.nimbusds</groupId>
    <artifactId>nimbus-jose-jwt</artifactId>
    <version>${com.nimbusds.jose.jwt.version}</version>
  </dependency>
  <dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk18on</artifactId>
    <version>${org.bouncycastle.version}</version>
  </dependency>
  <dependency>
    <groupId>org.jasypt</groupId>
    <artifactId>jasypt</artifactId>
    <version>${org.jasypt.version}</version>
  </dependency>
  <dependency>
    <groupId>org.jasypt</groupId>
    <artifactId>jasypt-hibernate5</artifactId>
    <version>${org.jasypt-hibernate5.version}</version>
  </dependency>
  <dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-jdk14</artifactId>
    <version>${org.slf4j.version}</version>
  </dependency>
  <dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>${com.google.code.gson.version}</version>
  </dependency>
  <dependency>
    <groupId>com.github.ben-manes.caffeine</groupId>
    <artifactId>caffeine</artifactId>
    <version>${com.github.ben-manes.caffeine.version}</version>
    <exclusions>
      <exclusion>
        <groupId>org.checkerframework</groupId>
        <artifactId>checker-qual</artifactId>
      </exclusion>
      <exclusion>
        <groupId>com.google.errorprone</groupId>
        <artifactId>error_prone_annotations</artifactId>
      </exclusion>
    </exclusions>
  </dependency>
  <dependency>
    <groupId>org.jsoup</groupId>
    <artifactId>jsoup</artifactId>
    <version>${org.jsoup.version}</version>
  </dependency>
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>${org.hibernate.hibernate.version}</version>
  </dependency>
  <dependency>
    <groupId>com.vladmihalcea</groupId>
    <artifactId>hibernate-types-55</artifactId>
    <version>${com.vladmihalcea.hibernate.types.version}</version>
  </dependency>
  <dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>${com.h2database.h2.version}</version>
  </dependency>
  <dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>${org.postgresql.postgresql.version}</version>
    <exclusions>
      <exclusion>
        <groupId>org.checkerframework</groupId>
        <artifactId>checker-qual</artifactId>
      </exclusion>
    </exclusions>
  </dependency>

  <!-- test deps -->
  <dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>${org.junit.jupiter.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>org.hamcrest</groupId>
    <artifactId>hamcrest</artifactId>
    <version>${org.hamcrest.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-junit-jupiter</artifactId>
    <version>${org.mockito.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-inline</artifactId>
    <version>${org.mockito.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-annotations</artifactId>
    <version>${com.github.spotbugs.version}</version>
    <scope>provided</scope>
  </dependency>
  <dependency>
    <groupId>io.fabric8</groupId>
    <artifactId>kubernetes-server-mock</artifactId>
    <version>${io.fabric8.client.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>io.fabric8</groupId>
    <artifactId>openshift-server-mock</artifactId>
    <version>${io.fabric8.client.version}</version>
    <scope>test</scope>
  </dependency>
</dependencies>

<build>
  <resources>
    <resource>
      <directory>${project.basedir}/src/main/resources</directory>
      <filtering>false</filtering>
    </resource>
    <resource>
      <directory>${project.basedir}/src/container</directory>
      <filtering>true</filtering>
      <includes>
        <include>**/Dockerfile</include>
      </includes>
    </resource>
  </resources>
  <plugins>
    <plugin>
      <groupId>io.reactiverse</groupId>
      <artifactId>vertx-maven-plugin</artifactId>
      <version>${io.reactiverse.plugin.version}</version>
      <configuration>
        <redeploy>true</redeploy>
        <launcher>io.cryostat.Cryostat</launcher>
      </configuration>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>${org.apache.maven.plugins.compiler.version}</version>
      <configuration>
        <forceJavacCompilerUse>true</forceJavacCompilerUse>
        <showDeprecation>true</showDeprecation>
        <showWarnings>true</showWarnings>
        <annotationProcessorPaths>
          <path>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger-compiler</artifactId>
            <version>${com.google.dagger.compiler.version}</version>
          </path>
        </annotationProcessorPaths>
      </configuration>
      <executions>
        <execution>
          <id>default-testCompile</id>
          <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <skip>${skipUTs}</skip>
            </configuration>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <version>${org.apache.maven.plugins.resources.version}</version>
      <executions>
        <execution>
          <id>copy-apidoc-resource</id>
          <phase>prepare-package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <resources>
              <resource>
                <directory>${project.basedir}</directory>
                <includes>
                  <include>HTTP_API.md</include>
                </includes>
              </resource>
            </resources>
            <outputDirectory>${project.build.directory}/assets/app/resources/io/cryostat/net/web</outputDirectory>
          </configuration>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <version>${org.codehaus.mojo.exec.plugin.version}</version>
      <configuration>
        <mainClass>${cryostat.mainClass}</mainClass>
        <additionalClasspathElements>
          <additionalClasspathElement>${project.build.directory}/assets/app/resources</additionalClasspathElement>
        </additionalClasspathElements>
      </configuration>
      <executions>
        <execution>
          <id>generate-git-version</id>
          <phase>generate-resources</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>git</executable>
            <arguments>
              <argument>describe</argument>
              <argument>--dirty</argument>
              <argument>--long</argument>
              <argument>--always</argument>
            </arguments>
            <outputFile>${project.build.directory}/assets/app/resources/io/cryostat/version</outputFile>
          </configuration>
        </execution>
        <execution>
          <id>build-base-image</id>
          <phase>prepare-package</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>build</argument>
              <argument>--platform</argument>
              <argument>${build.os}/${build.arch}</argument>
              <argument>--file</argument>
              <argument>${project.build.outputDirectory}/Dockerfile</argument>
              <argument>--tag</argument>
              <argument>${baseImage}:${baseImageTag}</argument>
              <argument>${project.basedir}/src/container</argument>
            </arguments>
            <skip>${skipBaseImage}</skip>
          </configuration>
        </execution>
        <execution>
          <id>save-base-image-tarball</id>
          <phase>prepare-package</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>save</argument>
              <argument>--output</argument>
              <argument>${project.build.directory}/${baseImageTarball}</argument>
              <argument>${baseImage}:${baseImageTag}</argument>
            </arguments>
            <skip>${skipBaseImage}</skip>
          </configuration>
        </execution>
        <execution>
          <id>create-pod</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>pod</argument>
              <argument>create</argument>
              <argument>--replace</argument>
              <argument>--name=${cryostat.itest.podName}</argument>
              <argument>--publish</argument>
              <argument>${cryostat.rjmxPort}:${cryostat.rjmxPort}</argument>
              <argument>--publish</argument>
              <argument>${cryostat.itest.webPort}:${cryostat.itest.webPort}</argument>
              <argument>--publish</argument>
              <argument>${cryostat.itest.jfr-datasource.port}:${cryostat.itest.jfr-datasource.port}</argument>
              <argument>--publish</argument>
              <argument>${cryostat.itest.grafana.port}:${cryostat.itest.grafana.port}</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>start-jfr-datasource</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>run</argument>
              <argument>--pull=${cryostat.itest.pullImages}</argument>
              <argument>--pod=${cryostat.itest.podName}</argument>
              <argument>--name=${cryostat.itest.jfr-datasource.containerName}</argument>
              <argument>--health-cmd</argument>
              <argument>curl --fail http://localhost:${cryostat.itest.jfr-datasource.port}</argument>
              <argument>--detach</argument>
              <argument>--rm</argument>
              <argument>${cryostat.itest.jfr-datasource.imageStream}:${cryostat.itest.jfr-datasource.version}</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>start-grafana</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>run</argument>
              <argument>--pull=${cryostat.itest.pullImages}</argument>
              <argument>--pod=${cryostat.itest.podName}</argument>
              <argument>--name=${cryostat.itest.grafana.containerName}</argument>
              <argument>--health-cmd</argument>
              <argument>wget -q --spider http://localhost:${cryostat.itest.grafana.port}/api/health</argument>
              <argument>--env</argument>
              <argument>GF_INSTALL_PLUGINS=grafana-simple-json-datasource</argument>
              <argument>--env</argument>
              <argument>GF_AUTH_ANONYMOUS_ENABLED=true</argument>
              <argument>--detach</argument>
              <argument>--rm</argument>
              <argument>${cryostat.itest.grafana.imageStream}:${cryostat.itest.grafana.version}</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>start-cryostat</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>run</argument>
              <argument>--pull=never</argument>
              <argument>--pod=${cryostat.itest.podName}</argument>
              <argument>--name=${cryostat.itest.containerName}</argument>
              <argument>--health-cmd</argument>
              <argument>curl --fail http://localhost:${cryostat.itest.webPort}/health/liveness</argument>
              <argument>--requires</argument>
              <argument>${cryostat.itest.grafana.containerName},${cryostat.itest.jfr-datasource.containerName}</argument>
              <argument>--mount</argument>
              <argument>type=tmpfs,target=/opt/cryostat.d/conf.d</argument>
              <argument>--mount</argument>
              <argument>type=tmpfs,target=/opt/cryostat.d/templates.d</argument>
              <argument>--mount</argument>
              <argument>type=tmpfs,target=/opt/cryostat.d/recordings.d</argument>
              <argument>--mount</argument>
              <argument>type=tmpfs,target=/opt/cryostat.d/truststore.d</argument>
              <argument>--mount</argument>
              <argument>type=tmpfs,target=/opt/cryostat.d/probes.d</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_JMX_CREDENTIALS_DB_PASSWORD=${cryostat.itest.jmx.db-passwd}</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_JDBC_URL=jdbc:h2:file:/opt/cryostat.d/conf.d/h2;INIT=create domain if not exists jsonb as varchar</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_JDBC_DRIVER=org.h2.Driver</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_JDBC_USERNAME=sa</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_JDBC_PASSWORD=""</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_HIBERNATE_DIALECT=org.hibernate.dialect.H2Dialect</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_HBM2DDL=update</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_LOG_DB_QUERIES=true</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_ENABLE_JDP_BROADCAST=true</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_TARGET_CACHE_TTL=30</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_DISABLE_JMX_AUTH=true</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_DISABLE_SSL=true</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_WEB_HOST=${cryostat.itest.webHost}</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_RJMX_PORT=9091</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_WEB_PORT=${cryostat.itest.webPort}</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_EXT_WEB_PORT=${cryostat.itest.webPort}</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_CONFIG_PATH=/opt/cryostat.d/conf.d</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_ARCHIVE_PATH=/opt/cryostat.d/recordings.d</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_TEMPLATE_PATH=/opt/cryostat.d/templates.d</argument>
              <argument>--env</argument>
              <argument>CRYOSTAT_PROBE_TEMPLATE_PATH=/opt/cryostat.d/probes.d</argument>
              <argument>--env</argument>
              <argument>SSL_TRUSTSTORE_DIR=/opt/cryostat.d/truststore.d</argument>
              <argument>--env</argument>
              <argument>GRAFANA_DATASOURCE_URL=http://${cryostat.itest.webHost}:${cryostat.itest.jfr-datasource.port}</argument>
              <argument>--env</argument>
              <argument>GRAFANA_DASHBOARD_URL=http://${cryostat.itest.webHost}:${cryostat.itest.grafana.port}</argument>
              <argument>--detach</argument>
              <argument>--rm</argument>
              <argument>${cryostat.imageStream}:${cryostat.itest.imageTag}</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>wait-for-cryostat</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>timeout</executable>
            <arguments>
              <argument>2m</argument>
              <argument>sh</argument>
              <argument>-c</argument>
              <argument>until if ! podman inspect --type container ${cryostat.itest.containerName} > /dev/null; then exit 1; fi ; podman ps --filter health=healthy --filter name=${cryostat.itest.containerName} --format '{{.Names}} {{.Status}}' | tee /dev/stderr | grep ${cryostat.itest.containerName}; do podman ps --filter name=${cryostat.itest.containerName}; podman logs --timestamps --since 5s ${cryostat.itest.containerName}; sleep 5; done</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>wait-for-jfr-datasource</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>timeout</executable>
            <arguments>
              <argument>2m</argument>
              <argument>sh</argument>
              <argument>-c</argument>
              <argument>until if ! podman inspect --type container ${cryostat.itest.jfr-datasource.containerName} > /dev/null; then exit 1; fi ; podman ps --filter health=healthy --filter name=${cryostat.itest.jfr-datasource.containerName} --format '{{.Names}} {{.Status}}' | tee /dev/stderr | grep ${cryostat.itest.jfr-datasource.containerName}; do podman ps --filter name=${cryostat.itest.jfr-datasource.containerName}; podman logs --timestamps --since 5s ${cryostat.itest.jfr-datasource.containerName}; sleep 5; done</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>wait-for-grafana</id>
          <phase>pre-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>timeout</executable>
            <arguments>
              <argument>2m</argument>
              <argument>sh</argument>
              <argument>-c</argument>
              <argument>until if ! podman inspect --type container ${cryostat.itest.grafana.containerName} > /dev/null; then exit 1; fi ; podman ps --filter health=healthy --filter name=${cryostat.itest.grafana.containerName} --format '{{.Names}} {{.Status}}' | tee /dev/stderr | grep ${cryostat.itest.grafana.containerName}; do podman ps --filter name=${cryostat.itest.grafana.containerName}; podman logs --timestamps --since 5s ${cryostat.itest.grafana.containerName}; sleep 5; done</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>capture-oci-logs</id>
          <phase>post-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>logs</argument>
              <argument>${cryostat.itest.containerName}</argument>
            </arguments>
            <outputFile>${project.build.directory}/${cryostat.itest.containerName}-${maven.build.timestamp}.log</outputFile>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
        <execution>
          <id>destroy-pod</id>
          <phase>post-integration-test</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>${imageBuilder}</executable>
            <arguments>
              <argument>pod</argument>
              <argument>rm</argument>
              <argument>--force</argument>
              <argument>${cryostat.itest.podName}</argument>
            </arguments>
            <skip>${skipITs}</skip>
          </configuration>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>${org.apache.maven.plugins.surefire.version}</version>
      <configuration>
        <skipTests>${skipUTs}</skipTests>
        <trimStackTrace>false</trimStackTrace>
      </configuration>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-failsafe-plugin</artifactId>
      <version>${org.apache.maven.plugins.failsafe.version}</version>
      <executions>
        <execution>
          <id>failsafe-tests</id>
          <goals>
            <goal>integration-test</goal>
            <goal>verify</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <skipTests>${skipTests}</skipTests>
        <skipITs>${skipITs}</skipITs>
        <runOrder>random</runOrder>
        <systemPropertyVariables>
          <cryostatWebPort>${cryostat.itest.webPort}</cryostatWebPort>
          <cryostatPodName>${cryostat.itest.podName}</cryostatPodName>
        </systemPropertyVariables>
      </configuration>
    </plugin>
    <plugin>
      <groupId>com.google.cloud.tools</groupId>
      <artifactId>jib-maven-plugin</artifactId>
      <version>${com.google.cloud.tools.jib.maven.plugin.version}</version>
      <executions>
        <execution>
          <id>build-oci-image</id>
          <phase>package</phase>
          <goals>
            <goal>dockerBuild</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <useOnlyProjectCache>true</useOnlyProjectCache>
        <dockerClient>
          <executable>${imageBuilder}</executable>
        </dockerClient>
        <from>
          <image>tar://${project.build.directory}/${baseImageTarball}</image>
          <platforms>
            <platform>
              <os>${build.os}</os>
              <architecture>${build.arch}</architecture>
            </platform>
          </platforms>
        </from>
        <to>
          <image>${cryostat.imageStream}</image>
          <tags>${cryostat.imageVersionLower},${cryostat.imageVersionLower}-${build.os}-${build.arch}</tags>
        </to>
        <container>
          <format>OCI</format>
          <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
          <entrypoint>${cryostat.entrypoint}</entrypoint>
          <mainClass>${cryostat.mainClass}</mainClass>
          <ports>
            <port>${cryostat.webPort}</port>
            <port>${cryostat.rjmxPort}</port>
          </ports>
        </container>
        <extraDirectories>
          <paths>
            <path>
              ${project.build.directory}/assets
            </path>
            <path>
              <from>src/main/extras</from>
              <into>/</into>
              <excludes>
                <exclude>cryostat.jfc</exclude>
              </excludes>
            </path>
          </paths>
          <permissions>
            <permission>
              <file>${cryostat.entrypoint}</file>
              <mode>755</mode>
            </permission>
          </permissions>
        </extraDirectories>
      </configuration>
    </plugin>
    <plugin>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-maven-plugin</artifactId>
      <version>${com.github.spotbugs.plugin.version}</version>
      <executions>
        <execution>
          <id>spotbugs</id>
          <phase>verify</phase>
          <goals>
            <goal>check</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.jacoco</groupId>
      <artifactId>jacoco-maven-plugin</artifactId>
      <version>${org.jacoco.maven.plugin.version}</version>
      <executions>
        <execution>
          <goals>
            <goal>prepare-agent</goal>
          </goals>
        </execution>
        <execution>
          <id>report</id>
          <phase>verify</phase>
          <goals>
            <goal>report</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>com.diffplug.spotless</groupId>
      <artifactId>spotless-maven-plugin</artifactId>
      <version>${com.diffplug.spotless.maven.plugin.version}</version>
      <executions>
        <execution>
          <id>spotless</id>
          <phase>verify</phase>
          <goals>
            <goal>check</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <java>
          <googleJavaFormat>
            <version>${com.google.googlejavaformat.version}</version>
            <style>AOSP</style>
            <reflowLongStrings>true</reflowLongStrings>
          </googleJavaFormat>
          <trimTrailingWhitespace/>
          <endWithNewline/>
          <importOrder>
            <order>java,javax,org.openjdk.jmc,io.cryostat,</order>
          </importOrder>
          <removeUnusedImports/>
        </java>
      </configuration>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-site-plugin</artifactId>
      <version>${org.apache.maven.plugins.site.version}</version>
    </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-project-info-reports-plugin</artifactId>
      <version>${org.apache.maven.plugins.info.reports.version}</version>
    </plugin>
    <plugin>
      <groupId>com.mycila</groupId>
      <artifactId>license-maven-plugin</artifactId>
      <version>${com.mycila.license.maven.plugin.version}</version>
      <configuration>
        <licenseSets>
          <licenseSet>
            <header>LICENSE</header>
            <includes>
              <include>src/main/**/*.java</include>
              <include>src/test/**/*.java</include>
            </includes>
            <excludes>
              <exclude>src/main/java/io/cryostat/util/OutputToReadStream.java</exclude>
            </excludes>
          </licenseSet>
        </licenseSets>
      </configuration>
      <executions>
        <execution>
          <id>update-license</id>
          <goals>
            <goal>check</goal>
          </goals>
          <phase>process-sources</phase>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>build-helper-maven-plugin</artifactId>
      <version>${org.codehaus.mojo.build.helper.plugin.version}</version>
      <executions>
        <execution>
          <id>image-tag-to-lower</id>
          <goals>
            <goal>regex-property</goal>
          </goals>
          <configuration>
            <name>cryostat.imageVersionLower</name>
            <regex>^.*$</regex>
            <value>${cryostat.imageVersion}</value>
            <replacement>${cryostat.imageVersion}</replacement>
            <toLowerCase>true</toLowerCase>
            <failIfNoMatch>false</failIfNoMatch>
          </configuration>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>dev.dimlight</groupId>
      <artifactId>shellcheck-maven-plugin</artifactId>
      <version>${shellcheck-maven-plugin.version}</version>
      <configuration>
        <sourceDirs>
          <sourceDir>
            <directory>${project.basedir}</directory>
            <includes>
                <include>**/*.sh</include>
                <include>**/*.bash</include>
            </includes>
            <excludes>
                <exclude>web-client/**</exclude>
            </excludes>
          </sourceDir>
        </sourceDirs>
        <failBuildIfWarnings>true</failBuildIfWarnings>
        <binaryResolutionMethod>embedded</binaryResolutionMethod>
      </configuration>
      <executions>
        <execution>
          <id>shellcheck</id>
          <phase>verify</phase>
          <goals>
              <goal>check</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>

<reporting>
  <plugins>
    <plugin>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-maven-plugin</artifactId>
      <version>${com.github.spotbugs.plugin.version}</version>
    </plugin>
    <plugin>
      <groupId>org.jacoco</groupId>
      <artifactId>jacoco-maven-plugin</artifactId>
      <version>${org.jacoco.maven.plugin.version}</version>
      <configuration>
        <excludes>
          <exclude>**/*_Factory.*</exclude>
          <exclude>**/*_Provide*Factory.*</exclude>
          <exclude>**/Dagger*.*</exclude>
          <exclude>**/*Module_*Factory.*</exclude>
          <exclude>**/*Module.*</exclude>
        </excludes>
      </configuration>
      <reportSets>
        <reportSet>
          <reports>
            <report>report</report>
          </reports>
        </reportSet>
      </reportSets>
    </plugin>
  </plugins>
</reporting>

<profiles>
  <profile>
    <id>default-arch</id>
    <activation>
      <property>
        <name>!build.arch</name>
      </property>
    </activation>
    <properties>
      <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
      <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
    </properties>
  </profile>
  <profile>
    <id>amd64</id>
    <activation>
      <property>
        <name>build.arch</name>
        <value>amd64</value>
      </property>
    </activation>
    <properties>
      <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
      <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
    </properties>
  </profile>
  <profile>
    <id>arm64</id>
    <activation>
      <property>
        <name>build.arch</name>
        <value>arm64</value>
      </property>
    </activation>
    <properties>
      <io.netty.netty-transport-native-epoll.classifier>linux-aarch_64</io.netty.netty-transport-native-epoll.classifier>
      <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
    </properties>
  </profile>
  <profile>
    <id>with-epoll</id>
    <activation>
      <property>
        <name>!build.exclude-epoll</name>
      </property>
    </activation>
    <properties>
      <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
    </properties>
    <dependencies>
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-transport-native-epoll</artifactId>
        <classifier>${io.netty.netty-transport-native-epoll.classifier}</classifier>
        <version>${io.netty.netty-transport-native-epoll.version}</version>
        <scope>${io.netty.netty-transport-native-epoll.scope}</scope>
      </dependency>
    </dependencies>
  </profile>
  <profile>
    <id>no-epoll</id>
    <activation>
      <property>
        <name>build.exclude-epoll</name>
      </property>
    </activation>
    <properties>
      <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
      <io.netty.netty-transport-native-epoll.scope>provided</io.netty.netty-transport-native-epoll.scope>
    </properties>
    <dependencies>
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-transport-native-epoll</artifactId>
        <classifier>${io.netty.netty-transport-native-epoll.classifier}</classifier>
        <version>${io.netty.netty-transport-native-epoll.version}</version>
        <scope>${io.netty.netty-transport-native-epoll.scope}</scope>
      </dependency>
    </dependencies>
  </profile>
  <profile>
    <id>headless</id>
    <activation>
      <property>
        <name>headless</name>
        <value>true</value>
      </property>
    </activation>
    <properties>
      <cryostat.imageVersion>${project.version}-headless</cryostat.imageVersion>
    </properties>
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${org.apache.maven.plugins.failsafe.version}</version>
          <configuration>
            <systemPropertyVariables>
              <isHeadlessBuild>true</isHeadlessBuild>
            </systemPropertyVariables>
          </configuration>
        </plugin>
      </plugins>
    </build>
  </profile>
  <profile>
    <id>headfull</id>
    <activation>
      <property>
        <name>headless</name>
        <value>!true</value>
      </property>
    </activation>
    <properties>
      <cryostat.imageVersion>${project.version}</cryostat.imageVersion>
    </properties>
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${org.apache.maven.plugins.clean.version}</version>
          <executions>
            <execution>
              <id>clean web-client</id>
              <phase>clean</phase>
              <goals>
                <goal>clean</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <filesets>
              <fileset>
                <directory>web-client</directory>
                <includes>
                    <include>node_modules/**</include>
                    <include>dist/**</include>
                </includes>
              </fileset>
              <fileset>
                <directory>bin</directory>
                <includes>
                  <include>node/**</include>
                </includes>
              </fileset>
            </filesets>
            <systemPropertyVariables>
              <isHeadlessBuild>false</isHeadlessBuild>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.github.eirslett</groupId>
          <artifactId>frontend-maven-plugin</artifactId>
          <version>${com.github.eirslett.frontend.plugin.version}</version>
          <configuration>
            <workingDirectory>${project.basedir}/web-client</workingDirectory>
            <installDirectory>${project.basedir}/bin</installDirectory>
          </configuration>
          <executions>
            <execution>
              <id>install node and npm</id>
              <phase>initialize</phase>
              <goals>
                <goal>install-node-and-yarn</goal>
              </goals>
              <configuration>
                <nodeVersion>${node.version}</nodeVersion>
                <yarnVersion>${yarn.version}</yarnVersion>
              </configuration>
            </execution>
            <execution>
              <id>yarn install</id>
              <phase>initialize</phase>
              <goals>
                <goal>yarn</goal>
              </goals>
              <configuration>
                <arguments>install --immutable</arguments>
              </configuration>
            </execution>
            <execution>
              <id>yarn run build:notests</id>
              <phase>compile</phase>
              <goals>
                <goal>yarn</goal>
              </goals>
              <configuration>
                <arguments>run build:notests</arguments>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${org.apache.maven.plugins.resources.version}</version>
          <executions>
            <execution>
              <id>copy-web-client-resources</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <resources>
                  <resource>
                    <directory>web-client/dist</directory>
                    <excludes>
                      <exclude>cache/**/*</exclude>
                    </excludes>
                  </resource>
                </resources>
                <outputDirectory>${project.build.directory}/assets/app/resources/io/cryostat/net/web</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
  <profile>
    <id>dist</id>
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${org.apache.maven.plugins.assembly.version}</version>
          <configuration>
            <descriptors>
              <descriptor>src/assembly/dist.xml</descriptor>
            </descriptors>
            <tarLongFileMode>posix</tarLongFileMode>
          </configuration>
          <executions>
            <execution>
              <id>assemble-dist</id>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
  <profile>
    <id>dep-check</id>
    <build>
      <plugins>
        <plugin>
          <groupId>org.owasp</groupId>
          <artifactId>dependency-check-maven</artifactId>
          <version>${org.owasp.dependency.check.version}</version>
          <configuration>
            <failBuildOnAnyVulnerability>true</failBuildOnAnyVulnerability>
          </configuration>
          <executions>
            <execution>
              <id>check-for-vulnerable-deps</id>
              <goals>
                <goal>check</goal>
              </goals>
              <phase>validate</phase>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
</profiles>

</project>

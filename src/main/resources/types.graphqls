scalar Object
scalar ServiceURI
scalar NodeType
scalar Url
scalar Boolean
scalar Long
scalar Int
scalar Float

enum ReplacementPolicy {
    ALWAYS
    STOPPED
    NEVER
}

input EnvironmentNodeFilterInput {
    id: Int
    name: String
    names: [String]
    nodeType: String
    labels: [String]
}

input TargetNodesFilterInput {
    id: Int
    name: String
    names: [String]
    labels: [String]
    annotations: [String]
}

input DescendantTargetsFilterInput {
    id: Int
    name: String
    names: [String]
    labels: [String]
    annotations: [String]
}

input ActiveRecordingFilterInput {
    name: String
    names: [String]
    state: String
    continuous: Boolean
    toDisk: Boolean
    durationMsGreaterThanEqual: Long
    durationMsLessThanEqual: Long
    startTimeMsBeforeEqual: Long # TODO support/convert other DateTime formats, not just epoch timestamps
    startTimeMsAfterEqual: Long
    labels: [String]
}

input ArchivedRecordingFilterInput {
    name: String
    names: [String]
    labels: [String]
    sourceTarget: String
    sizeBytesGreaterThanEqual: Long
    sizeBytesLessThanEqual: Long
    archivedTimeGreaterThanEqual: Long
    archivedTimeLessThanEqual: Long
}

type ServiceRef {
    jvmId: String
    serviceUri: ServiceURI!
    alias: String
    labels: Object!
    annotations: Annotations!
}

type Annotations {
    platform: Object!
    cryostat: Object!
}

type TargetNode implements Node {
    target: ServiceRef!
    recordings: Recordings
    mbeanMetrics: MBeanMetrics

    id: Int!
    name: String!
    nodeType: NodeType!
    labels: Object!

    doStartRecording(recording: RecordingSettings!): ActiveRecording
    doSnapshot: ActiveRecording
}

type EnvironmentNode implements Node {
    children: [Node!]!

    id: Int!
    name: String!
    nodeType: NodeType!
    labels: Object!

    descendantTargets(filter: DescendantTargetsFilterInput): [TargetNode!]!
}

interface Node {
    id: Int!
    name: String!
    nodeType: NodeType!
    labels: Object!
}

type Recordings {
    active(filter: ActiveRecordingFilterInput): Active!
    archived(filter: ArchivedRecordingFilterInput): Archived!
}

type ActiveRecording implements Recording {
    state: String!
    startTime: Long!

    duration: Long!
    continuous: Boolean!
    toDisk: Boolean!
    maxSize: Long!
    maxAge: Long!
    archiveOnStop: Boolean!

    name: String!
    reportUrl: Url!
    downloadUrl: Url!
    metadata: RecordingMetadata!

    doArchive: ArchivedRecording!
    doStop: ActiveRecording
    doDelete: ActiveRecording
    doPutMetadata(metadata: Object): ActiveRecording
}

type ArchivedRecording implements Recording {
    name: String!
    reportUrl: Url!
    downloadUrl: Url!
    metadata: RecordingMetadata!
    size: Long!
    archivedTime: Long!

    doDelete: ArchivedRecording!
    doPutMetadata(metadata: Object): ArchivedRecording!
}

type Active {
    data: [ActiveRecording!]!
    aggregate: AggregateInfo!
}

type Archived {
    data: [ArchivedRecording!]!
    aggregate: AggregateInfo!
}

type AggregateInfo {
    count: Long!
    size: Long!
}

interface Recording {
    name: String!
    reportUrl: Url!
    downloadUrl: Url!
    metadata: RecordingMetadata!
}

type RecordingMetadata {
    labels: Object!
}

input RecordingSettings {
    name: String!
    template: String!
    templateType: String!
    replace: ReplacementPolicy
    restart: Boolean
    continuous: Boolean
    archiveOnStop: Boolean
    toDisk: Boolean
    duration: Long
    maxSize: Long
    maxAge: Long
    metadata: Object
}

type MBeanMetrics {
    runtime: RuntimeMetrics!
    memory: MemoryMetrics!
    thread: ThreadMetrics!
    os: OperatingSystemMetrics!
    jvmId: String!
}

# Currently all the relevant MXBean readable attributes in the Cryostat jvm 
type RuntimeMetrics {
    bootClassPath: String
    classPath: String
    inputArguments: [String]
    libraryPath: String
    managementSpecVersion: String
    name: String
    specName: String
    specVendor: String
    specVersion: String
    startTime: Long
    systemProperties: Object
    uptime: Long
    vmName: String
    vmVendor: String
    vmVersion: String
    bootClassPathSupported: Boolean
}

type MemoryMetrics {
    heapMemoryUsage: CustomMemoryUsage
    nonHeapMemoryUsage: CustomMemoryUsage
    objectPendingFinalizationCount: Int
    freeHeapMemory: Long
    freeNonHeapMemory: Long
    heapMemoryUsagePercent: Float
    verbose: Boolean
}

type CustomMemoryUsage {
    init: Long
    used: Long
    committed: Long
    max: Long
}

type ThreadMetrics {
    allThreadIds: [Long]
    currentThreadCpuTime: Long
    currentThreadUserTime: Long
    daemonThreadCount: Int
    peakThreadCount: Int
    threadCount: Int
    totalStartedThreadCount: Long
    currentThreadCpuTimeSupported: Boolean
    objectMonitorUsageSupported: Boolean
    synchronizerUsageSupported: Boolean
    threadContentionMonitoringEnabled: Boolean
    threadContentionMonitoringSupported: Boolean
    threadCpuTimeEnabled: Boolean
    threadCpuTimeSupported: Boolean
}

type OperatingSystemMetrics {
    arch: String
    availableProcessors: Int
    name: String
    systemLoadAverage: Float
    version: String
    committedVirtualMemorySize: Long
    freePhysicalMemorySize: Long
    freeSwapSpaceSize: Long
    processCpuLoad: Float
    processCpuTime: Long
    systemCpuLoad: Float
    totalPhysicalMemorySize: Long
    totalSwapSpaceSize: Long
}
